#!/usr/bin/env ruby

$verbose = false

require "optparse"
require "netrc"
require "octokit"
require "yaml"
require "pp"
require "faraday-http-cache"
require "tty-spinner"

def github
  @github ||= begin
    faraday = Faraday::RackBuilder.new do |builder|
      builder.use Faraday::Request::Retry, exceptions: [Octokit::ServerError]
      builder.use Octokit::Middleware::FollowRedirects
      builder.use Octokit::Response::RaiseError
      builder.use Octokit::Response::FeedParser
      builder.response :logger if $verbose
      builder.adapter Faraday.default_adapter
    end

    Octokit.middleware = faraday

    connection = Octokit::Client.new(netrc: true)
    connection.auto_paginate = true
    connection.per_page = 100
    connection
  end
end

# Some ground rules:
# We'll never rename a label
# To do mappings, we'll create the new label, and then for each issue
# with the old label, we'll add the new label, then remove the old one.
def ensure_label(repository, label)
  mappings = label.fetch("mappings") { [] }
  all = github.labels(repository)

  if label["delete"]
    puts "  Deleted label: '#{label['name']}'" if github.delete_label!(repository, label["name"])
    return
  end

  current = all.select { |cur| cur[:name] == label["name"] }.first
  if current.nil?
    github.add_label(repository, label["name"], label["color"], description: label["description"])
    puts "  Successfully added label"
  else
    unless current[:color] == label["color"]
      github.update_label(repository, label["name"], color: label["color"])
      puts "  Updated color for #{label['name']}"
    end

    unless label["description"].nil? || current[:description] == label["description"]
      github.update_label(repository, label["name"], description: label["description"])
      puts "  Updated description for #{label['name']}"
    end
  end

  mappings.each do |previous|
    next unless all.any? { |l| l[:name] == previous }
    puts "Working on #{previous} mapping for #{label['name']}"
    count = 0
    issues_with(repository, "label", previous) do |issue|
      puts "  Updating issue #{issue}"
      puts "  Adding label: '#{label['name']}'"
      github.add_labels_to_an_issue(repository, issue, [label["name"]])
      puts "  Removing label '#{previous}'"
      github.remove_label(repository, issue, previous)
      count += 1
      puts "-----"
    end
    # search is a bit slow, so we'll check that we deleted the number
    # that we expected or we've got none left. Of course, if search
    # updates while we're deleting a huge list we'll need to re-run, but
    # that should be OK
    remaining = issues_with(repository, "label", previous)
    if remaining.empty? || remaining.length == count
      puts "  Deleting label '#{previous}' from #{repository}"
      github.delete_label!(repository, previous)
    else
      puts "There are remaining issues returned from search - you should manually check that the '#{previous}' label has no tickets assigned (or rerun this command in a few minutes time)"
    end
  end
end

# Same basic rules as for labels, but we have to edit issues to set the
# milestone rather than updating the list of labels.
# TODO: handle state and due_date
def ensure_milestone(repository, milestone)
  mappings = milestone.delete("mappings") { [] }
  all = github.milestones(repository)

  current = all.select { |cur| cur[:title] == milestone["name"] }.first
  new = current

  if current.nil?
    new = github.create_milestone(repository, milestone["name"], description: milestone["description"])
    puts "  Successfully added milestone"
  else
    unless current[:title] == milestone["name"] && current[:description] == milestone["description"]
      github.update_milestone(repository, current[:number], title: milestone["name"], description: milestone["description"])
      puts "Updated milestone"
    end
  end

  mappings.each do |previous|
    next unless all.any? { |l| l[:title] == previous }
    previous_number = all.select { |l| l[:title] == previous }.first[:number]

    count = 0
    issues_with(repository, "milestone", previous) do |issue|
      puts "  Setting milestone on issue #{issue}"
      github.update_issue(repository, issue, milestone: new[:number])
      count += 1
      puts "-----"
    end
    # search is a bit slow, so we'll check that we deleted the number
    # that we expected or we've got none left. Of course, if search
    # updates while we're deleting a huge list we'll need to re-run, but
    # that should be OK
    remaining = issues_with(repository, "milestone", previous)
    if remaining.empty? || remaining.length == count
      puts "  Deleting milestone '#{previous}' from #{repository}"
      github.delete_milestone(repository, previous_number)
    else
      puts "There are remaining issues returned from search - you should manually check that the '#{previous}' milestone has no tickets assigned (or rerun this command in a few minutes time)"
    end
  end
end

# Yields each issue number that has the label or milestone
# Returns an array of all issues that have the label
def issues_with(repository, type, label, &block)
  query_string = "repo:#{repository} #{type}:\"#{label}\""
  issues = github.search_issues(query_string)[:items].map { |item| item[:number] }

  if block_given?
    issues.each do |issue|
      yield(issue)
    end
  end

  issues
end

# rescues github timeouts so we can wait and try again
def ensure_with_retries(type, repo, object)
  attempts = 1
  send("ensure_#{type}".to_sym, repo, object)
rescue Octokit::BadGateway => e
  raise "Too many errors received from Github. Cannot continue! #{e}" if attempts > 10
  sleep 5
  attempts += 1
  retry
rescue Octokit::TooManyRequests
  wait = github.rate_limit["resets_in"] + 5 # 5 more to be safe
  wait = 10 if wait > 10
  warn "GitHub API limit reached! Waiting #{wait} seconds..."
  sleep wait
  retry
end

# either fetch repos from the org specified in the config file or
# from the repos in the config
#
# @returns [Array]
def repos(config_hash)
  if config_hash["organizations"]
    repos = []
    config_hash["organizations"]["orgs"].each do |org|
      # grab all the full repo names in this org. If no type is specified use public and also skip the forks
      # we also skip anything in the blacklist array
      repos << github.org_repos(org, type: config_hash["organizations"]["type"] || "public")
                     .collect { |x| x["full_name"] unless x["fork"] || x["archived"] || (config_hash["organizations"]["blacklist"] && config_hash["organizations"]["blacklist"].include?(x["full_name"])) }
    end
    repo_list = repos.flatten.compact.sort # return a single sorted array w/o nils
    puts "Based on the provided org(s) (#{config_hash["organizations"]["orgs"].join(',')}) managing the following repos: #{repo_list.join(', ')}"
    repo_list
  elsif config_hash["repositories"]
    config_hash["repositories"]
  else
    puts "Config does not include either 'repositories' or 'organizations' sections. Cannot continue!"
    exit!
  end
end

opt_hash = {}
OptionParser.new do |opts|
  opts.banner = "Usage: repo_man [options]"

  opts.on("-c", "--config-file FILE", "The configuration to use") do |cfg|
    opt_hash["config"] = cfg
  end

  opts.on("-v", "--verbose", "Make repo man verbose") do
    $verbose = true
    opt_hash["verbose"] = true
  end

  opts.on("-y", "--apply", "Apply changes") do
    opt_hash["apply"] = true
  end

  opts.on("-h", "--help", "Prints this help") do
    puts opts
    exit
  end

  unless opt_hash["config"]
    puts "No config file provided"
    puts
    abort opts.to_s
  end
end.parse!

unless opt_hash["apply"] then
  @github = Object.new
  def @github.method_missing msg, *args
    warn "NOT RUNNING: %p(%p)" % [msg, args]
    true
  end
end

config = YAML.load_file(opt_hash["config"])
repos(config).each do |repo|
  unless config["label"].nil?
    config["label"].each do |label|
      puts "Working on label '#{label['name']}' for '#{repo}'"
      ensure_with_retries("label", repo, label)
    end
  end
  unless config["milestones"].nil?
    config["milestones"].each do |milestone|
      puts "Working on milestone '#{milestone['name']}' for '#{repo}'"
      ensure_with_retries("milestone", repo, milestone)
    end
  end
end
